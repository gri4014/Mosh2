// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // The URL for SQLite points to a file in the prisma directory
  url      = "file:./dev.db" 
}

// --- Enums ---

enum SubscriptionTier {
  BASELINE
  PROMOTION
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE // Might be useful for paused/lapsed subscriptions later
  CANCELLED
}

enum PostStatus {
  SCHEDULED
  PENDING_REVIEW
  APPROVED
  PUBLISHING // Intermediate state while API call is in progress
  PUBLISHED
  FAILED
  CANCELLED // If user cancels before publishing
}

enum AdCampaignStatus {
  PENDING   // Waiting to start or be approved by platform
  ACTIVE
  PAUSED
  COMPLETED
  ERROR     // If campaign creation or running failed
}

enum InstagramAccountType {
  BUSINESS
  CREATOR
  PERSONAL // May not be fully supported by API, but good to track
  UNKNOWN
}


// --- Models ---

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String // Hashed password
  subscriptionTier   SubscriptionTier?  // Added field for subscription tier
  createdAt          DateTime           @default(now()) @map("created_at")
  instagramAccounts  InstagramAccount[]
  subscriptions      Subscription[]
  surveyResponses    SurveyResponse[]
  globalStrategies   GlobalStrategy[]
  monthlyStrategies  MonthlyStrategy[]
  posts              Post[]
  adCampaigns        AdCampaign[]

  @@map("users") // Map to the 'users' table name
}

model InstagramAccount {
  id                String               @id @default(uuid())
  userId            String               @map("user_id")
  instagramUserId   String               @unique @map("instagram_user_id") // Instagram's unique ID for the user
  username          String?
  accessToken       String               @map("access_token") // Store securely (encrypted recommended)
  accountType       InstagramAccountType @default(UNKNOWN) @map("account_type")
  connectedAt       DateTime             @default(now()) @map("connected_at")
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             Post[]

  @@map("instagram_accounts")
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @map("user_id")
  tier       SubscriptionTier
  status     SubscriptionStatus
  startedAt  DateTime           @default(now()) @map("started_at")
  expiresAt  DateTime?          @map("expires_at") // Nullable if subscription doesn't expire (e.g., lifetime) or TBD
  createdAt  DateTime           @default(now()) @map("created_at") // Added createdAt for consistency
  updatedAt  DateTime           @updatedAt @map("updated_at")
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SurveyResponse {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("survey_responses")
}

model GlobalStrategy {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  content           Json // Strategy document as JSON
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthlyStrategies MonthlyStrategy[]

  @@map("global_strategies")
}

model MonthlyStrategy {
  id               String         @id @default(uuid())
  userId           String         @map("user_id")
  globalStrategyId String         @map("global_strategy_id")
  month            Int
  year             Int
  content          Json // Structured monthly plan as JSON
  createdAt        DateTime       @default(now()) @map("created_at")
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  globalStrategy   GlobalStrategy @relation(fields: [globalStrategyId], references: [id], onDelete: Cascade)
  posts            Post[]

  @@unique([userId, month, year])
  @@map("monthly_strategies")
}

model Post {
  id                 String            @id @default(uuid())
  userId             String            @map("user_id")
  monthlyStrategyId  String            @map("monthly_strategy_id")
  instagramAccountId String            @map("instagram_account_id")
  title              String?
  description        String? // Description/brief for the post
  generatedText      String?           @map("generated_text") // Actual post caption
  imageUrls          Json?             @map("image_urls") // Array of image URLs
  hashtags           Json? // Array of hashtags
  scheduledFor       DateTime          @map("scheduled_for") // Store in UTC
  status             PostStatus        @default(SCHEDULED)
  publishedAt        DateTime?         @map("published_at")
  instagramPostId    String?           @unique @map("instagram_post_id") // Instagram's ID for the published post
  errorMessage       String?           @map("error_message")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthlyStrategy    MonthlyStrategy   @relation(fields: [monthlyStrategyId], references: [id], onDelete: Cascade)
  instagramAccount   InstagramAccount  @relation(fields: [instagramAccountId], references: [id], onDelete: Cascade)
  adCampaigns        AdCampaign[]

  @@map("posts")
}

model AdCampaign {
  id                  String           @id @default(uuid())
  userId              String           @map("user_id")
  postId              String           @unique @map("post_id") // Assuming one campaign per post for MVP
  instagramCampaignId String?          @unique @map("instagram_campaign_id") // Instagram's ID for the campaign
  // SQLite does not have a native Decimal type, Prisma maps it to Float or String.
  // Using Float might lead to precision issues with currency.
  // Using String is safer for precision but requires manual conversion in application code.
  // Let's use Float for simplicity in MVP, but note this limitation.
  budget              Float // Use Float for SQLite (mapped from Decimal)
  status              AdCampaignStatus
  startDate           DateTime         @map("start_date")
  endDate             DateTime?        @map("end_date")
  performanceData     Json?            @map("performance_data") // Store metrics as JSON
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  post                Post             @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("ad_campaigns")
}
